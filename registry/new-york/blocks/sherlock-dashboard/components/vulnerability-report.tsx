import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Progress } from "@/components/ui/progress"
import { formatSecurityDate } from "../lib/format-date"
import {
  AlertTriangle,
  Shield,
  FileText,
  ExternalLink,
  Calendar,
  Server,
  Lock,
  Eye,
  Code,
  Wifi
} from "lucide-react"

interface VulnerabilityReportProps {
  analysis: any[]
}

interface Vulnerability {
  id: string
  title: string
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info'
  category: 'ssl' | 'headers' | 'owasp' | 'malware' | 'dns' | 'api'
  description: string
  impact: string
  solution: string
  references: string[]
  affectedUrl: string
  discovered: string
  status: 'open' | 'resolved' | 'accepted' | 'false_positive'
}

export function VulnerabilityReport({ analysis }: VulnerabilityReportProps) {
  const mockVulnerabilities: Vulnerability[] = [
    {
      id: 'VULN-001',
      title: 'SSL Certificate Expiring Soon',
      severity: 'high',
      category: 'ssl',
      description: 'SSL certificate expires in 7 days',
      impact: 'Site may become inaccessible or show security warnings',
      solution: 'Renew SSL certificate before expiration date',
      references: ['https://letsencrypt.org/', 'https://www.digicert.com/'],
      affectedUrl: 'https://example.com',
      discovered: '2024-01-15T10:30:00Z',
      status: 'open'
    },
    {
      id: 'VULN-002',
      title: 'Missing Security Headers',
      severity: 'medium',
      category: 'headers',
      description: 'Several important security headers are missing',
      impact: 'Reduced protection against common web attacks',
      solution: 'Add Content-Security-Policy, X-Frame-Options, and X-Content-Type-Options headers',
      references: ['https://owasp.org/www-project-secure-headers/'],
      affectedUrl: 'https://example.com',
      discovered: '2024-01-15T10:30:00Z',
      status: 'open'
    },
    {
      id: 'VULN-003',
      title: 'Outdated jQuery Library',
      severity: 'medium',
      category: 'owasp',
      description: 'jQuery version 3.2.1 has known security vulnerabilities',
      impact: 'Potential XSS and injection attacks',
      solution: 'Update to jQuery 3.7.1 or later',
      references: ['https://jquery.com/upgrade-guide/3.7/'],
      affectedUrl: 'https://example.com/js/jquery.js',
      discovered: '2024-01-15T10:30:00Z',
      status: 'resolved'
    },
    {
      id: 'VULN-004',
      title: 'API Rate Limiting Not Configured',
      severity: 'high',
      category: 'api',
      description: 'API endpoints lack proper rate limiting controls',
      impact: 'Vulnerable to brute force and DoS attacks',
      solution: 'Implement rate limiting with Redis or similar solution',
      references: ['https://owasp.org/www-community/controls/Blocking_Brute_Force_Attacks'],
      affectedUrl: 'https://api.example.com/v1/*',
      discovered: '2024-01-15T09:15:00Z',
      status: 'open'
    }
  ]

  const vulnerabilities = mockVulnerabilities

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <AlertTriangle className="h-4 w-4 text-red-600" />
      case 'high':
        return <AlertTriangle className="h-4 w-4 text-orange-600" />
      case 'medium':
        return <AlertTriangle className="h-4 w-4 text-yellow-600" />
      case 'low':
        return <AlertTriangle className="h-4 w-4 text-blue-600" />
      default:
        return <Shield className="h-4 w-4 text-gray-600" />
    }
  }

  const getSeverityBadge = (severity: string) => {
    const variants = {
      critical: "destructive",
      high: "destructive",
      medium: "outline",
      low: "secondary",
      info: "outline"
    } as const

    return (
      <Badge variant={variants[severity as keyof typeof variants] || "outline"}>
        {severity.toUpperCase()}
      </Badge>
    )
  }

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'ssl':
        return <Lock className="h-4 w-4" />
      case 'headers':
        return <Server className="h-4 w-4" />
      case 'owasp':
        return <Shield className="h-4 w-4" />
      case 'malware':
        return <Eye className="h-4 w-4" />
      case 'dns':
        return <Wifi className="h-4 w-4" />
      case 'api':
        return <Code className="h-4 w-4" />
      default:
        return <Shield className="h-4 w-4" />
    }
  }

  const getStatusBadge = (status: string) => {
    const variants = {
      open: "destructive",
      resolved: "default",
      accepted: "secondary",
      false_positive: "outline"
    } as const

    const colors = {
      open: "bg-red-50 text-red-700 dark:bg-red-950 dark:text-red-300",
      resolved: "bg-green-50 text-green-700 dark:bg-green-950 dark:text-green-300",
      accepted: "bg-blue-50 text-blue-700 dark:bg-blue-950 dark:text-blue-300",
      false_positive: "bg-gray-50 text-gray-700 dark:bg-gray-950 dark:text-gray-300"
    }

    return (
      <Badge
        variant={variants[status as keyof typeof variants] || "outline"}
        className={colors[status as keyof typeof colors] || ""}
      >
        {status.replace('_', ' ')}
      </Badge>
    )
  }

  const severityStats = {
    critical: vulnerabilities.filter(v => v.severity === 'critical').length,
    high: vulnerabilities.filter(v => v.severity === 'high').length,
    medium: vulnerabilities.filter(v => v.severity === 'medium').length,
    low: vulnerabilities.filter(v => v.severity === 'low').length,
    total: vulnerabilities.length
  }

  return (
    <div className="space-y-6">
      {/* Vulnerability Overview */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-red-600">{severityStats.critical}</div>
            <div className="text-sm text-muted-foreground">Critical</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-orange-600">{severityStats.high}</div>
            <div className="text-sm text-muted-foreground">High</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-yellow-600">{severityStats.medium}</div>
            <div className="text-sm text-muted-foreground">Medium</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-blue-600">{severityStats.low}</div>
            <div className="text-sm text-muted-foreground">Low</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold">{severityStats.total}</div>
            <div className="text-sm text-muted-foreground">Total</div>
          </CardContent>
        </Card>
      </div>

      {/* Detailed Vulnerability Table */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <FileText className="h-5 w-5" />
            <span>Detailed Vulnerability Report</span>
          </CardTitle>
          <CardDescription>
            Comprehensive list of all identified security vulnerabilities and issues
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Vulnerability</TableHead>
                <TableHead>Severity</TableHead>
                <TableHead>Category</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Affected URL</TableHead>
                <TableHead>Discovered</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {vulnerabilities.map((vuln) => (
                <TableRow key={vuln.id}>
                  <TableCell>
                    <div>
                      <div className="font-medium">{vuln.title}</div>
                      <div className="text-sm text-muted-foreground">
                        {vuln.id} â€¢ {vuln.description}
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      {getSeverityIcon(vuln.severity)}
                      {getSeverityBadge(vuln.severity)}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      {getCategoryIcon(vuln.category)}
                      <span className="capitalize">{vuln.category}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    {getStatusBadge(vuln.status)}
                  </TableCell>
                  <TableCell>
                    <code className="text-xs bg-muted px-1 py-0.5 rounded">
                      {vuln.affectedUrl}
                    </code>
                  </TableCell>
                  <TableCell>
                    <span className="text-sm text-muted-foreground">
                      {new Date(vuln.discovered).toLocaleDateString()}
                    </span>
                  </TableCell>
                  <TableCell>
                    <div className="flex space-x-1">
                      <Button variant="outline" size="sm">
                        Details
                      </Button>
                      <Button variant="outline" size="sm">
                        <ExternalLink className="h-3 w-3" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Vulnerability Details Tabs */}
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Details & Solutions</CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="details" className="space-y-4">
            <TabsList>
              <TabsTrigger value="details">Details</TabsTrigger>
              <TabsTrigger value="solutions">Solutions</TabsTrigger>
              <TabsTrigger value="references">References</TabsTrigger>
            </TabsList>

            <TabsContent value="details" className="space-y-4">
              {vulnerabilities.map((vuln) => (
                <div key={vuln.id} className="border rounded-lg p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center space-x-2">
                      {getSeverityIcon(vuln.severity)}
                      <h3 className="font-semibold">{vuln.title}</h3>
                      {getSeverityBadge(vuln.severity)}
                    </div>
                    {getStatusBadge(vuln.status)}
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <h4 className="font-medium mb-1">Impact</h4>
                      <p className="text-muted-foreground">{vuln.impact}</p>
                    </div>
                    <div>
                      <h4 className="font-medium mb-1">Affected URL</h4>
                      <code className="text-xs bg-muted px-1 py-0.5 rounded">
                        {vuln.affectedUrl}
                      </code>
                    </div>
                  </div>
                </div>
              ))}
            </TabsContent>

            <TabsContent value="solutions" className="space-y-4">
              {vulnerabilities.map((vuln) => (
                <div key={vuln.id} className="border rounded-lg p-4">
                  <h3 className="font-semibold mb-2">{vuln.title}</h3>
                  <div className="bg-green-50 dark:bg-green-950 p-3 rounded">
                    <h4 className="font-medium text-green-800 dark:text-green-200 mb-1">Solution</h4>
                    <p className="text-sm text-green-700 dark:text-green-300">{vuln.solution}</p>
                  </div>
                </div>
              ))}
            </TabsContent>

            <TabsContent value="references" className="space-y-4">
              {vulnerabilities.map((vuln) => (
                <div key={vuln.id} className="border rounded-lg p-4">
                  <h3 className="font-semibold mb-2">{vuln.title}</h3>
                  <div className="space-y-1">
                    {vuln.references.map((ref, index) => (
                      <Button key={index} variant="outline" size="sm" className="mr-2 mb-1">
                        <ExternalLink className="h-3 w-3 mr-1" />
                        Reference {index + 1}
                      </Button>
                    ))}
                  </div>
                </div>
              ))}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  )
}