import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { AlertTriangle, Shield, CheckCircle, XCircle } from "lucide-react"

interface VulnerabilityReportProps {
  analysis: any[]
}

export function VulnerabilityReport({ analysis }: VulnerabilityReportProps) {
  const mockVulnerabilities = [
    {
      id: '1',
      title: 'SQL Injection Vulnerability',
      severity: 'critical',
      cve: 'CVE-2024-12345',
      description: 'Potential SQL injection in user login form',
      affectedUrl: 'https://example.com/login',
      discovered: '2024-01-15T10:30:00Z',
      status: 'open'
    },
    {
      id: '2',
      title: 'Outdated SSL Certificate',
      severity: 'high',
      cve: 'N/A',
      description: 'SSL certificate expires in 7 days',
      affectedUrl: 'https://api.example.com',
      discovered: '2024-01-14T15:20:00Z',
      status: 'in_progress'
    },
    {
      id: '3',
      title: 'Missing Security Headers',
      severity: 'medium',
      cve: 'N/A',
      description: 'Content Security Policy header not implemented',
      affectedUrl: 'https://example.com',
      discovered: '2024-01-13T09:45:00Z',
      status: 'resolved'
    }
  ]

  const vulnerabilities = mockVulnerabilities

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
      case 'high':
        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
      case 'low':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'resolved':
        return <CheckCircle className="h-4 w-4 text-green-600" />
      case 'in_progress':
        return <Shield className="h-4 w-4 text-blue-600" />
      case 'open':
        return <XCircle className="h-4 w-4 text-red-600" />
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-600" />
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'resolved':
        return 'Resolved'
      case 'in_progress':
        return 'In Progress'
      case 'open':
        return 'Open'
      default:
        return 'Unknown'
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <AlertTriangle className="h-5 w-5" />
          <span>Vulnerability Report</span>
        </CardTitle>
        <CardDescription>
          Detailed security vulnerabilities and remediation recommendations
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {vulnerabilities.map((vuln) => (
            <div key={vuln.id} className="border rounded-lg p-4 space-y-4">
              {/* Vulnerability Header */}
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3">
                  {getStatusIcon(vuln.status)}
                  <div>
                    <h3 className="font-semibold text-lg">{vuln.title}</h3>
                    <div className="flex items-center space-x-2 mt-1">
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                      {vuln.cve !== 'N/A' && (
                        <Badge variant="outline">{vuln.cve}</Badge>
                      )}
                      <Badge variant="secondary">
                        {getStatusText(vuln.status)}
                      </Badge>
                    </div>
                  </div>
                </div>
                <div className="text-right text-sm text-muted-foreground">
                  {new Date(vuln.discovered).toLocaleDateString()}
                </div>
              </div>

              {/* Description */}
              <div>
                <p className="text-sm text-muted-foreground mb-2">
                  <strong>Affected URL:</strong> {vuln.affectedUrl}
                </p>
                <p className="text-sm">{vuln.description}</p>
              </div>

              {/* Actions */}
              <div className="flex space-x-2 pt-2">
                <Button variant="outline" size="sm">
                  View Details
                </Button>
                <Button variant="outline" size="sm">
                  Generate Fix
                </Button>
                {vuln.status !== 'resolved' && (
                  <Button size="sm">
                    Mark as Resolved
                  </Button>
                )}
              </div>
            </div>
          ))}

          {vulnerabilities.length === 0 && (
            <div className="text-center py-8">
              <CheckCircle className="h-12 w-12 text-green-600 mx-auto mb-4" />
              <p className="text-muted-foreground">No vulnerabilities found</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  )
}